module RequirementsModel

open util/relation

-- Locate@Text
sig Requirement {
	requires: set Requirement,
	refines: set Requirement,
	contains: set Requirement,
	partiallyRefines: set Requirement,
	conflicts: set Requirement,
	equals: set Requirement
}

sig ContractReq, SystemReq extends Requirement {}

-- Locate@File
sig Specification extends Requirement {}

-- Locate@Java
abstract sig Implementation {
	satisfy: set Requirement,
	refines: set Implementation,
	requires: set Implementation,
}

sig Model, Code extends Implementation {}

-- ConsistencyRules
fact functional_facts {
	no Requirement<:requires & refines
	no Requirement<:requires & contains
	no Requirement<:requires & partiallyRefines
	no Requirement<:requires & conflicts
	no Requirement<:requires & equals

	no refines & contains
	no refines & partiallyRefines
	no refines & conflicts
	no refines & equals

	no contains & partiallyRefines
	no contains & conflicts
	no contains & equals

	no partiallyRefines & conflicts
	no partiallyRefines & equals

	no conflicts & equals

	no Requirement<:requires & ~refines
	no Requirement<:requires & ~contains
	no Requirement<:requires & ~partiallyRefines
	no Requirement<:requires & ~conflicts
	no Requirement<:requires & ~equals

	no refines & ~contains
	no refines & ~partiallyRefines
	no refines & ~conflicts
	no refines & ~equals

	no contains & ~partiallyRefines
	no contains & ~conflicts
	no contains & ~equals

	no partiallyRefines & ~conflicts
	no partiallyRefines & ~equals

	no conflicts & ~equals
}

-- Properties of Relation Types
fact relation_properties {
	irreflexive[Requirement<:requires]
	antisymmetric[Requirement<:requires]

	irreflexive[Requirement<:refines]
	antisymmetric[Requirement<:refines]

	irreflexive[contains]
	antisymmetric[contains]

	irreflexive[partiallyRefines]
	antisymmetric[partiallyRefines]
	transitive[partiallyRefines]

	irreflexive[conflicts]
	
	symmetric[equals]
}

-- Reason@Requirement.equals
fact { transitive[equals] }

-- Reason@Requirement.contains
fact{ transitive[contains] }

-- Reason@Requirement.requires
fact{ transitive[Requirement<:requires] }

-- Reason@Requirement.refines
fact{ transitive[Requirement<:refines] }

-- Reason@Requirement.partiallyRefines
fact{ transitive[partiallyRefines] }

-- Full Semantics of Equal
fact equals_facts {
	all a,b: Requirement {
		b in a.equals => a.conflicts = b.conflicts
		b in a.equals => a.requires = b.requires
		b in a.equals => a.equals = b.equals
		b in a.equals => a.refines = b.refines
		b in a.equals => a.partiallyRefines = b.partiallyRefines
		b in a.equals => a.contains = b.contains
                                    
		b in a.equals => a.~conflicts = b.~conflicts
		b in a.equals => a.~requires = b.~requires
		b in a.equals => a.~equals = b.~equals
		b in a.equals => a.~refines = b.~refines
		b in a.equals => a.~partiallyRefines = b.~partiallyRefines
		b in a.equals => a.~contains = b.~contains
	}
}

-- Reason@Requirement.requires
fact infer_requires_facts {
	all a,b,c: Requirement {
		b in a.requires && c in b.refines && c !in a.contains => c in a.requires
		b in a.refines && c in b.requires && c !in a.contains => c in a.requires
		b in a.requires && c in b.contains && c !in a.contains => c in a.requires
		b in a.contains && c in b.requires && c !in a.contains => c in a.requires
	}
}

-- Reason@Requirement.partiallyRefines
fact infer_partiallyrefines_facts {
	all a,b,c: Requirement {
		b in a.contains && c in b.refines => c in a.partiallyRefines
		b in a.refines && c in b.contains => c in a.partiallyRefines
		b in a.partiallyRefines && c in b.contains => c in a.partiallyRefines
		b in a.contains && c in b.partiallyRefines => c in a.partiallyRefines
		b in a.refines && c in b.partiallyRefines => c in a.partiallyRefines
		b in a.partiallyRefines && c in b.refines => c in a.partiallyRefines
	}
}

-- Reason@Requirement.conflicts
fact infer_conflicts_facts {
	all a,b,c: Requirement {
		b in a.(requires + refines + contains) && c in b.conflicts => c in a.conflicts
	}
	symmetric[conflicts]
}

