module TraceabilityModel

open util/relation

abstract sig Artefact {
	requires: set Artefact,
	refines: set Artefact,
	contains: set Artefact,
	partiallyRefines: set Artefact,
	conflicts: set Artefact,
}

-- Locate@File
sig Specification extends Artefact {}

-- Locate@Text
sig Requirement extends Artefact { 
	equals: set Requirement,
}

-- Locate@Text
sig LowLevelReq, HighLevelReq extends Requirement { }

abstract sig Implementation extends Artefact {
	satisfies: set Requirement,
	partiallySatisfies: set Requirement,
}

-- Locate@Model
sig Model extends Implementation {}

-- Locate@Java
sig Code extends Implementation {}

-- Properties of Relation Types
fact relation_properties {
	irreflexive[requires]
	antisymmetric[requires]

	irreflexive[refines]
	antisymmetric[refines]

	irreflexive[contains]
	antisymmetric[contains]

	irreflexive[partiallyRefines]
	antisymmetric[partiallyRefines]

	irreflexive[conflicts]
	
	symmetric[equals]
	
	irreflexive[satisfies]
	antisymmetric[satisfies]
}

-- Reason@Artefact.equals
fact { transitive[equals] }

-- Reason@Artefact.contains
fact{ transitive[contains] }

-- Reason@Artefact.requires
fact{ transitive[requires] }

-- Reason@Artefact.refines
fact{ transitive[refines] }

-- Reason@Artefact.partiallyRefines
fact{ transitive[partiallyRefines] }

-- Reason@Implementation.satisfies
fact { transitive[satisfies] }

-- Full Semantics of Equal
fact equals_facts {
	all a,b: Requirement {
		b in a.equals => a.conflicts = b.conflicts
		b in a.equals => a.requires = b.requires
		b in a.equals => a.equals = b.equals
		b in a.equals => a.refines = b.refines
		b in a.equals => a.partiallyRefines = b.partiallyRefines
		b in a.equals => a.contains = b.contains
                                    
		b in a.equals => a.~conflicts = b.~conflicts
		b in a.equals => a.~requires = b.~requires
		b in a.equals => a.~equals = b.~equals
		b in a.equals => a.~refines = b.~refines
		b in a.equals => a.~partiallyRefines = b.~partiallyRefines
		b in a.equals => a.~contains = b.~contains
	}
}

-- Reason@Requirement.requires
fact infer_requires_facts {
	all a,b,c: Artefact {
		b in a.requires && c in b.refines && c !in a.contains => c in a.requires
		b in a.refines && c in b.requires && c !in a.contains => c in a.requires
		b in a.requires && c in b.contains && c !in a.contains => c in a.requires
		b in a.contains && c in b.requires && c !in a.contains => c in a.requires
	}
}

-- Reason@Requirement.partiallyRefines
fact infer_partiallyrefines_facts {
	all a,b,c: Artefact {
		b in a.contains && c in b.refines => c in a.partiallyRefines
		b in a.refines && c in b.contains => c in a.partiallyRefines
		b in a.partiallyRefines && c in b.contains => c in a.partiallyRefines
		b in a.contains && c in b.partiallyRefines => c in a.partiallyRefines
		b in a.refines && c in b.partiallyRefines => c in a.partiallyRefines
		b in a.partiallyRefines && c in b.refines => c in a.partiallyRefines
	}
}

-- Reason@Requirement.conflicts
fact infer_conflicts_facts {
	all a,b,c: Artefact {
		b in a.(requires + refines + contains) && c in b.conflicts => c in a.conflicts
	}
	symmetric[conflicts]
}

-- Reason@Implementation.satisfies
fact infer_satisfies_facts {
	all a,b : Requirement, c: Implementation {
		b in a.refines && b in c.satisfies => a in c.satisfies
		b in a.refines && a in c.satisfies => b in c.satisfies
	}
}

-- Reason@Implementation.partiallySatisfies
fact infer_partiallysatisfies_facts {
	all a,b : Requirement, c: Implementation {
		b in c.satisfies && b in a.contains => a in c.partiallySatisfies
	}
}

-- pairwise asymmetry among relations
fact Consistency_Rules {
	no requires & refines
	no requires & contains
	no requires & partiallyRefines
	no requires & conflicts
	no requires & equals

	no refines & contains
	no refines & partiallyRefines
	no refines & conflicts
	no refines & equals

	no contains & partiallyRefines
	no contains & conflicts
	no contains & equals

	no partiallyRefines & conflicts
	no partiallyRefines & equals

	no conflicts & equals

	no requires & ~refines
	no requires & ~contains
	no requires & ~partiallyRefines
	no requires & ~conflicts
	no requires & ~equals

	no refines & ~contains
	no refines & ~partiallyRefines
	no refines & ~conflicts
	no refines & ~equals

	no contains & ~partiallyRefines
	no contains & ~conflicts
	no contains & ~equals

	no partiallyRefines & ~conflicts
	no partiallyRefines & ~equals

	no conflicts & ~equals
}

fact { 
	contains in (((Requirement + Specification) <: contains & contains :> Requirement) + (Implementation <: contains & contains :> Implementation))
	refines in ((Requirement <: refines & refines :> Requirement) + (Implementation <: refines & refines :> Implementation))
	requires in ((Requirement <: requires & requires :> Requirement) + (Implementation <: requires & requires :> Implementation))
}
