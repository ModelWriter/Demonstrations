[? extends Item, Item_2, Item_1, Item_0, Nil<Paper>, Container46, List<? extends Item>, Nil<Pen>, Nil<? extends Item>, PenList_0, PaperList_0, List_2, List<Pen>, List_4, List_3, List<Paper>]

relation bounds:
 Nil: [[], [[List_2], [List_4], [List_3]]]
 PaperList: [[[PaperList_0]]]
 List: [[[PenList_0], [PaperList_0], [List_2], [List_4], [List_3]]]
 Pen: [[], [[Item_2], [Item_1], [Item_0]]]
 Container: [[[Container46]]]
 PenList: [[[PenList_0]]]
 Item: [[[Item_2], [Item_1], [Item_0]]]
 Paper: [[], [[Item_2], [Item_1], [Item_0]]]
 List<? extends Item>: [[], [[PenList_0], [PaperList_0], [List_2], [List_4], [List_3]]]
 ? extends Item: [[], [[Item_2], [Item_1], [Item_0]]]
 Nil<? extends Item>: [[], [[List_2], [List_4], [List_3]]]
 Nil<Pen>: [[], [[List_2], [List_4], [List_3]]]
 Nil<Paper>: [[], [[List_2], [List_4], [List_3]]]
 List<Pen>: [[], [[PenList_0], [PaperList_0], [List_2], [List_4], [List_3]]]
 List<Paper>: [[], [[PenList_0], [PaperList_0], [List_2], [List_4], [List_3]]]
 car: [[], [[PenList_0, Item_2], [PenList_0, Item_1], [PenList_0, Item_0], [PaperList_0, Item_2], [PaperList_0, Item_1], [PaperList_0, Item_0], [List_2, Item_2], [List_2, Item_1], [List_2, Item_0], [List_4, Item_2], [List_4, Item_1], [List_4, Item_0], [List_3, Item_2], [List_3, Item_1], [List_3, Item_0]]]
 cdr: [[], [[PenList_0, PenList_0], [PenList_0, PaperList_0], [PenList_0, List_2], [PenList_0, List_4], [PenList_0, List_3], [PaperList_0, PenList_0], [PaperList_0, PaperList_0], [PaperList_0, List_2], [PaperList_0, List_4], [PaperList_0, List_3], [List_2, PenList_0], [List_2, PaperList_0], [List_2, List_2], [List_2, List_4], [List_2, List_3], [List_4, PenList_0], [List_4, PaperList_0], [List_4, List_2], [List_4, List_4], [List_4, List_3], [List_3, PenList_0], [List_3, PaperList_0], [List_3, List_2], [List_3, List_4], [List_3, List_3]]]
 list: [[], [[Container46, PenList_0], [Container46, PaperList_0], [Container46, List_2], [Container46, List_4], [Container46, List_3]]]
int bounds: 
 []

no List & Container
no List & Item
no Container & Item
Nil in List
PaperList in List
PenList in List
no Nil & PaperList
no Nil & PenList
no PaperList & PenList
all l: List.car | lone (l.~(cdr + car + list))
all l: List.cdr | lone (l.~(cdr + car + list))
all l: List | !(l in (l.^cdr))
all l: List | lone (l.car)
all l: List | lone (l.cdr)
all c: Container.list | lone (c.~(cdr + car + list))
one Container
all c: Container | some (c.list)
Pen in Item
Paper in Item
no Pen & Paper
no Nil.car
no Nil.cdr
all l: List - Nil | some (l.cdr
  some l.car)
all l: List | some n: Nil |  all n': Nil |   n' in (l.*cdr <=> 
  n' = n)
cdr in List -> List
list in Container -> List
Container.*(cdr + car + list) = (PenList + PaperList + Item + Paper + Nil + 
List + Container + Pen)
Container.list in List<? extends Item>
car in (List<Pen> -> Pen + List<Paper> -> Paper)
cdr in (List<Pen> -> List<Pen> + List<Paper> -> List<Paper>)
Nil = Nil<? extends Item> + Nil<Pen> + Nil<Paper>
List = (Nil + PenList + PaperList + List<? extends Item> + List<Pen> + 
List<Paper>)
? extends Item = Pen + Paper
Nil<? extends Item> in List<? extends Item>
Nil<Pen> in List<Pen>
Nil<Paper> in List<Paper>
List<? extends Item> = List<Pen> + List<Paper>
no List<Paper> & List<Pen>
Nil<? extends Item> = Nil<Pen> + Nil<Paper>
no Nil<Paper> & Nil<Pen>
PaperList in List<Paper>
PenList in List<Pen>