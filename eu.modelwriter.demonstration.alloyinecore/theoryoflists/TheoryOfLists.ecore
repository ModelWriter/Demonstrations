<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="theoryoflists" nsURI="eu.modelwriter.examples.theoryoflists" nsPrefix="tol">
  <eAnnotations source="http://www.modelwriter.eu/alloyinecore/expression/invariant">
    <details key="callable" value="false"/>
    <details key="formula" value="one Container"/>
  </eAnnotations>
  <eAnnotations source="http://www.modelwriter.eu/alloyinecore/expression/invariant">
    <details key="callable" value="false"/>
    <details key="formula" value="List = Container.lists.*cdr"/>
  </eAnnotations>
  <eAnnotations source="http://www.modelwriter.eu/alloyinecore/source">
    <details key="source" value="package theoryoflists: tol= 'eu.modelwriter.examples.theoryoflists'&#xA;{&#xA;&#x9;&#xA;&#x9;class Container&#xA;&#x9;{&#xA;&#x9;&#x9;property lists : List&lt;Thing> {composes};&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;&#xA;&#x9;class Thing [0,4];&#xA;&#x9;class List&lt;E> [4]&#xA;&#x9;{&#xA;&#x9;&#x9;property car : E [0..1] {composes};&#xA;&#x9;&#x9;property cdr : List&lt;E> [0..1] {composes, acyclic};&#xA;&#x9;}&#xA;&#x9;class one Nil&lt;E> extends List&lt;E>&#xA;&#x9;{&#xA;&#x9;&#x9;invariant : no Nil.car;&#xA;&#x9;&#x9;invariant : no Nil.cdr;&#xA;&#x9;&#x9;invariant : all l: List - Nil | some l.cdr and some l.car;&#xA;&#x9;&#x9;invariant : all l: List | Nil in l.*cdr;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;invariant : one Container;&#xA;&#x9;invariant : List = Container.lists.*cdr;&#xA;&#x9;&#xA;&#x9;--pred prefixes[ pre: List → List ] {&#xA; &#x9;--all l: List | Nil in l.pre&#xA; &#x9;--all l: List − Nil | l not in Nil.pre&#xA; &#x9;--all l, p: List − Nil | (p in l.pre) iff (l.car = p.car and p.cdr in l.cdr.pre)&#xA; &#x9;--}&#xA; &#x9;&#xA; &#x9;--invariant : all l: List | Nil in l.(List -> List);&#xA; &#x9;--invariant : all l: List - Nil | l not in Nil.(List -> List);&#xA; &#x9;--invariant : all l, p: List - Nil | (p in l.(List -> List)) iff (l.car = p.car and p.cdr = l.cdr.(List -> List));&#xA;&#xA;}"/>
    <details key="source_hash" value="-1860556866"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Container">
    <eStructuralFeatures xsi:type="ecore:EReference" name="lists" ordered="false" lowerBound="1" containment="true">
      <eGenericType eClassifier="//List">
        <eTypeArguments eClassifier="//Thing"/>
      </eGenericType>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Thing">
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/reasoning/upperscope">
      <details key="upperscope" value="4"/>
    </eAnnotations>
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/reasoning/lowerscope">
      <details key="lowerscope" value="0"/>
    </eAnnotations>
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/reasoning/upperincluded">
      <details key="lowerincluded" value="["/>
    </eAnnotations>
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/reasoning/lowerincluded">
      <details key="upperincluded" value="]"/>
    </eAnnotations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="List">
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/reasoning/lowerscope">
      <details key="lowerscope" value="4"/>
    </eAnnotations>
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/reasoning/upperincluded">
      <details key="lowerincluded" value="["/>
    </eAnnotations>
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/reasoning/lowerincluded">
      <details key="upperincluded" value="]"/>
    </eAnnotations>
    <eTypeParameters name="E"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="car" ordered="false" containment="true">
      <eGenericType eTypeParameter="//List/E"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="cdr" ordered="false" containment="true">
      <eAnnotations source="http://www.modelwriter.eu/alloyinecore/acyclic"/>
      <eGenericType eClassifier="//List">
        <eTypeArguments eTypeParameter="//List/E"/>
      </eGenericType>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Nil">
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/multiplicity">
      <details key="multiplicity" value="one"/>
    </eAnnotations>
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/expression/invariant">
      <details key="callable" value="false"/>
      <details key="formula" value="no Nil.car"/>
    </eAnnotations>
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/expression/invariant">
      <details key="callable" value="false"/>
      <details key="formula" value="no Nil.cdr"/>
    </eAnnotations>
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/expression/invariant">
      <details key="callable" value="false"/>
      <details key="formula" value="all l: List - Nil | some l.cdr and some l.car"/>
    </eAnnotations>
    <eAnnotations source="http://www.modelwriter.eu/alloyinecore/expression/invariant">
      <details key="callable" value="false"/>
      <details key="formula" value="all l: List | Nil in l.*cdr"/>
    </eAnnotations>
    <eTypeParameters name="E"/>
    <eGenericSuperTypes eClassifier="//List">
      <eTypeArguments eTypeParameter="//Nil/E"/>
    </eGenericSuperTypes>
  </eClassifiers>
</ecore:EPackage>
