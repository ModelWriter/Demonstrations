module eu/modelwriter/actions/havelsan/alm

abstract sig Requirement {}

one sig Project extends Requirement {
	contract: some ContractRequirement}

sig ContractRequirement extends Requirement {
	system: set SystemRequirement,
	contains: set ContractRequirement}
fact {all c: ContractRequirement | one c.~contract => no c.~contains}
fact {all c: ContractRequirement | no c.~contract => one c.~contains}

sig SystemRequirement extends Requirement {
	implementedBy: set Implementation,
	requires: set SystemRequirement,
	refines: set SystemRequirement} 
fact { all s1, s2: SystemRequirement | s1.refines = s2 => s2.requires = s1 }
fact { all s: SystemRequirement | one s.~system}

abstract sig Implementation {
	verifiedBy: set Verification}
fact {all i: Implementation | some i.~implementedBy}

sig Design, Software, Hardware extends Implementation {}

abstract sig Verification {}
sig Simulation, Analysis, Test extends Verification {}
fact {all v: Verification | some verifiedBy.v}

fact noCycles {
	no c: ContractRequirement | c in c.^contains
	no s: SystemRequirement | s in s.^refines
	no s: SystemRequirement | s in s.^requires}

fact noSelfRelation{
	no c: ContractRequirement | c in c.contains
	no s: SystemRequirement | s in s.requires 
	no s: SystemRequirement | s in s.refines}