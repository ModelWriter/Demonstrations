module eu/modelwriter/actions/havelsan/alm/noreasoning

abstract sig Artefact {
	depends: set Artefact}

-- root of the traceablity links in this scenario
one sig Specification extends Artefact {
	contract: some ContractRequirement}

-- Locate@Text
sig ContractRequirement extends Artefact {
	system: set SystemRequirement,
	contains: set ContractRequirement}
fact {all c: ContractRequirement | 	one c.~contract => no c.~contains}

fact {all c: ContractRequirement | 	no c.~contract => one c.~contains}

-- Locate@ReqIF
sig SystemRequirement extends Artefact {
	satisfiedBy: set Implementation,
	requires: set SystemRequirement,
	refines: set SystemRequirement} 

-- Reason@SystemRequirement.requires
fact { all s, s': SystemRequirement | s' in s.refines => s in s'.requires}
fact { all s: SystemRequirement | one s.~system}

abstract sig Implementation extends Artefact {
	verifiedBy: set Verification}
fact {all i: Implementation | some i.~satisfiedBy}

-- Locate@EMF
sig Model extends Implementation {
	transforms, conforms: set Model,
	generates: set (Code + Component),
	fulfills: set ContractRequirement }

-- Locate@Java
sig Code, Component extends Implementation {}

abstract sig Verification extends Artefact  {}
sig Simulation, Analysis, Test extends Verification {}
fact {all v: Verification | some verifiedBy.v}

fact noCycles {
	no a: Artefact | a in a.^depends
	no c: ContractRequirement | c in c.^contains
	no s: SystemRequirement | s in s.^refines
	no s: SystemRequirement | s in s.^requires
	no m: Model | m in m.^transforms}

fact noSelfRelation{
	no a: Artefact | a in a.^depends
	no c: ContractRequirement | c in c.contains
	no s: SystemRequirement | s in s.requires 
	no s: SystemRequirement | s in s.refines
	no m: Model | m in m.transforms}

pred show{
	#ContractRequirement > 1  and #contract > 1 and #contains > 1
	and #Code > 1 and #requires > 2 and #depends < 2  and #SystemRequirement.refines >1 and #verifiedBy > 0}